// https://projecteuler.net/problem=12
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

package main

import (
	"fmt"
	"math"
)

func getDivisorsCount(n int64) int64 {
	var divisorsCount, i int64
	for i = 1; i < int64(math.Sqrt(float64(n))); i++ {
		if n%i == 0 {
			divisorsCount += 2
		}
	}

	// if n is a square number, then don't add 2, its square root is the only divisor
	if i*i == n {
		divisorsCount++
	}

	return divisorsCount
}

func main() {
	var divisors, triangleNumber int64
	for i := 1; divisors <= 500; i++ {
		triangleNumber = int64(i * (i + 1) / 2)
		divisors = getDivisorsCount(triangleNumber)
	}

	fmt.Println(triangleNumber)
}
